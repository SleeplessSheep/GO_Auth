# ================================================================================================
# AUTH SERVER ENVIRONMENT VARIABLES TEMPLATE
# ================================================================================================
# 
# ⚠️  SECURITY NOTICE: This is a TEMPLATE file for documentation purposes only.
# ⚠️  Real values should NEVER be committed to version control.
# ⚠️  Copy this to .env and fill in actual values for local development.
# ⚠️  Use GitHub Secrets / Kubernetes Secrets / AWS Secrets Manager for production.
#
# Created by: Development Team
# Purpose: Provide structure and documentation for required environment variables
# Status: TEMPLATE ONLY - No real secrets contained
# ================================================================================================

# ------------------------------------------------------------------------------------------------
# SERVER CONFIGURATION
# ------------------------------------------------------------------------------------------------
# Controls basic server behavior and environment-specific settings
AUTH_SERVER_ENVIRONMENT=development
AUTH_SERVER_HOST=0.0.0.0
AUTH_SERVER_PORT=8080
AUTH_SERVER_READ_TIMEOUT=30s
AUTH_SERVER_WRITE_TIMEOUT=30s

# ------------------------------------------------------------------------------------------------
# DATABASE CONFIGURATION (PostgreSQL)
# ------------------------------------------------------------------------------------------------
# Database connection settings - adjust for your environment
AUTH_DATABASE_HOST=localhost
AUTH_DATABASE_PORT=5432
AUTH_DATABASE_NAME=auth_db
AUTH_DATABASE_USER=postgres
AUTH_DATABASE_PASSWORD=CHANGE_ME_SECURE_PASSWORD_HERE
AUTH_DATABASE_SSL_MODE=disable

# Production PostgreSQL example:
# AUTH_DATABASE_HOST=auth-db.cluster-xyz.region.rds.amazonaws.com
# AUTH_DATABASE_SSL_MODE=require
# AUTH_DATABASE_PASSWORD=use-secrets-manager-or-k8s-secret

# ------------------------------------------------------------------------------------------------
# REDIS CONFIGURATION
# ------------------------------------------------------------------------------------------------
# Redis connection for sessions and caching
AUTH_REDIS_HOST=localhost
AUTH_REDIS_PORT=6379
AUTH_REDIS_PASSWORD=CHANGE_ME_REDIS_PASSWORD_HERE
AUTH_REDIS_DB=0

# Production Redis example:
# AUTH_REDIS_HOST=auth-redis.cache.amazonaws.com
# AUTH_REDIS_PASSWORD=use-secrets-manager-or-k8s-secret

# ------------------------------------------------------------------------------------------------
# JWT & CRYPTOGRAPHY CONFIGURATION
# ------------------------------------------------------------------------------------------------
# CRITICAL: Master encryption key for JWT signing keys stored in database
# MUST be 32+ characters, randomly generated, different per environment
AUTH_AUTH_MASTER_ENCRYPTION_KEY=CHANGE_ME_32_BYTE_RANDOM_KEY_HERE!!
AUTH_AUTH_JWT_ISSUER=https://auth.yourdomain.com
AUTH_AUTH_JWT_AUDIENCE=your-client-applications
AUTH_AUTH_ACCESS_TOKEN_EXPIRY=15m
AUTH_AUTH_REFRESH_TOKEN_EXPIRY=720h
AUTH_AUTH_AUTH_CODE_EXPIRY=10m
AUTH_AUTH_SESSION_EXPIRY=24h

# Production cryptography example:
# AUTH_AUTH_MASTER_ENCRYPTION_KEY=use-secrets-manager-32-chars-min
# AUTH_AUTH_JWT_ISSUER=https://auth.yourcompany.com

# ------------------------------------------------------------------------------------------------
# SECURITY CONFIGURATION
# ------------------------------------------------------------------------------------------------
# Rate limiting and security policies
AUTH_SECURITY_RATE_LIMIT_REQUESTS=1000
AUTH_SECURITY_RATE_LIMIT_WINDOW=1h
AUTH_SECURITY_PASSWORD_MIN_LENGTH=8
AUTH_SECURITY_MAX_LOGIN_ATTEMPTS=10
AUTH_SECURITY_LOCKOUT_DURATION=5m

# Production security example (stricter):
# AUTH_SECURITY_RATE_LIMIT_REQUESTS=100
# AUTH_SECURITY_PASSWORD_MIN_LENGTH=12
# AUTH_SECURITY_MAX_LOGIN_ATTEMPTS=5
# AUTH_SECURITY_LOCKOUT_DURATION=30m

# ------------------------------------------------------------------------------------------------
# GOOGLE OAUTH CONFIGURATION (Optional)
# ------------------------------------------------------------------------------------------------
# Google OAuth integration for social login
# Obtain from: https://console.developers.google.com/
AUTH_GOOGLE_CLIENT_ID=your-google-client-id.apps.googleusercontent.com
AUTH_GOOGLE_CLIENT_SECRET=CHANGE_ME_GOOGLE_CLIENT_SECRET_HERE
AUTH_GOOGLE_REDIRECT_URL=http://localhost:8080/auth/google/callback

# Production Google OAuth example:
# AUTH_GOOGLE_CLIENT_ID=prod-client-id.apps.googleusercontent.com
# AUTH_GOOGLE_CLIENT_SECRET=use-secrets-manager-or-k8s-secret
# AUTH_GOOGLE_REDIRECT_URL=https://auth.yourcompany.com/auth/google/callback

# ------------------------------------------------------------------------------------------------
# LDAP CONFIGURATION (For Admin Authentication)
# ------------------------------------------------------------------------------------------------
# LDAP integration for administrator authentication
# Required for admin dashboard access
AUTH_LDAP_HOST=ldap.yourcompany.com
AUTH_LDAP_PORT=389
AUTH_LDAP_BASE_DN=dc=yourcompany,dc=com
AUTH_LDAP_BIND_DN=cn=auth-service,ou=service-accounts,dc=yourcompany,dc=com
AUTH_LDAP_BIND_PASSWORD=CHANGE_ME_LDAP_SERVICE_ACCOUNT_PASSWORD
AUTH_LDAP_USER_FILTER=(uid=%s)
AUTH_LDAP_ADMIN_GROUP=administrators

# Production LDAP example (with SSL):
# AUTH_LDAP_HOST=ldaps.yourcompany.com
# AUTH_LDAP_PORT=636
# AUTH_LDAP_BIND_PASSWORD=use-secrets-manager-or-k8s-secret

# ================================================================================================
# DEVELOPMENT SETUP INSTRUCTIONS
# ================================================================================================
#
# 1. Copy this file to .env:
#    cp .env.template .env
#
# 2. Replace all CHANGE_ME_* values with actual secrets
#
# 3. For local development with Docker Compose:
#    - Use the values already configured in docker-compose.yml
#    - Or override them by uncommenting and modifying above
#
# 4. Never commit the .env file (it's in .gitignore)
#
# ================================================================================================
# PRODUCTION DEPLOYMENT NOTES
# ================================================================================================
#
# Kubernetes:
#   - Use kubectl to create secrets: kubectl create secret generic auth-secrets --from-env-file=.env
#   - Reference in deployment: valueFrom.secretKeyRef
#
# AWS:
#   - Store in AWS Secrets Manager or Parameter Store
#   - Use IAM roles for secure access
#   - Rotate secrets regularly using AWS Lambda
#
# Security Best Practices:
#   - Different secrets for each environment (dev/staging/prod)
#   - Regular secret rotation (quarterly for critical keys)
#   - Audit secret access logs
#   - Use least-privilege access policies
#
# ================================================================================================