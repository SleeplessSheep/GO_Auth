#!/bin/bash

# ================================================================================================
# LOCAL ENVIRONMENT SETUP SCRIPT
# ================================================================================================
# 
# Purpose: Help developers set up secure local development environment
# Usage: ./scripts/setup-local-env.sh
# 
# This script is safe to commit as it contains no secrets - it helps generate them securely
# ================================================================================================

set -e

PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
cd "$PROJECT_ROOT"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}================================================================================================${NC}"
echo -e "${BLUE}üîß Auth Server - Local Environment Setup${NC}"
echo -e "${BLUE}================================================================================================${NC}"
echo ""

# Check if .env already exists
if [ -f ".env" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  .env file already exists!${NC}"
    echo ""
    read -p "Do you want to overwrite it? [y/N] " -n 1 -r
    echo ""
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${GREEN}‚úÖ Keeping existing .env file${NC}"
        exit 0
    fi
fi

echo -e "${BLUE}üìù Creating .env file from template...${NC}"

# Copy template to .env
cp .env.template .env

echo -e "${GREEN}‚úÖ Template copied to .env${NC}"
echo ""

# Generate secure master encryption key
echo -e "${BLUE}üîê Generating secure master encryption key...${NC}"

# Generate a 32-character random key
MASTER_KEY=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-32)

# Replace the placeholder in .env
if [[ "$OSTYPE" == "darwin"* ]]; then
    # macOS
    sed -i '' "s/CHANGE_ME_32_BYTE_RANDOM_KEY_HERE!!/${MASTER_KEY}/" .env
else
    # Linux
    sed -i "s/CHANGE_ME_32_BYTE_RANDOM_KEY_HERE!!/${MASTER_KEY}/" .env
fi

echo -e "${GREEN}‚úÖ Generated secure 32-character master encryption key${NC}"
echo ""

# Generate secure database password
echo -e "${BLUE}üîê Generating secure database password...${NC}"

DB_PASSWORD=$(openssl rand -base64 16 | tr -d "=+/")

if [[ "$OSTYPE" == "darwin"* ]]; then
    sed -i '' "s/CHANGE_ME_SECURE_PASSWORD_HERE/${DB_PASSWORD}/" .env
else
    sed -i "s/CHANGE_ME_SECURE_PASSWORD_HERE/${DB_PASSWORD}/" .env
fi

echo -e "${GREEN}‚úÖ Generated secure database password${NC}"
echo ""

# Generate secure Redis password
echo -e "${BLUE}üîê Generating secure Redis password...${NC}"

REDIS_PASSWORD=$(openssl rand -base64 16 | tr -d "=+/")

if [[ "$OSTYPE" == "darwin"* ]]; then
    sed -i '' "s/CHANGE_ME_REDIS_PASSWORD_HERE/${REDIS_PASSWORD}/" .env
else
    sed -i "s/CHANGE_ME_REDIS_PASSWORD_HERE/${REDIS_PASSWORD}/" .env
fi

echo -e "${GREEN}‚úÖ Generated secure Redis password${NC}"
echo ""

# Update docker-compose.yml with generated passwords
echo -e "${BLUE}üê≥ Updating docker-compose.yml with secure passwords...${NC}"

# Create a custom docker-compose override
cat > docker-compose.override.yml << EOF
# ================================================================================================
# DOCKER COMPOSE OVERRIDE - AUTO-GENERATED
# ================================================================================================
# 
# ‚ö†Ô∏è  This file is auto-generated and contains local development secrets
# ‚ö†Ô∏è  It's included in .gitignore and should never be committed
# ‚ö†Ô∏è  Generated by: scripts/setup-local-env.sh
#
# Purpose: Override docker-compose.yml with secure local passwords
# ================================================================================================

services:
  postgres:
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      
  redis:
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    
  auth-server:
    environment:
      AUTH_DATABASE_PASSWORD: ${DB_PASSWORD}
      AUTH_REDIS_PASSWORD: ${REDIS_PASSWORD}
      AUTH_AUTH_MASTER_ENCRYPTION_KEY: ${MASTER_KEY}
EOF

echo -e "${GREEN}‚úÖ Created docker-compose.override.yml with secure passwords${NC}"
echo ""

# Provide usage instructions
echo -e "${BLUE}================================================================================================${NC}"
echo -e "${GREEN}üéâ Local environment setup complete!${NC}"
echo -e "${BLUE}================================================================================================${NC}"
echo ""
echo -e "${YELLOW}üìã Next Steps:${NC}"
echo ""
echo -e "1. ${GREEN}Review and customize .env file:${NC}"
echo -e "   nano .env"
echo ""
echo -e "2. ${GREEN}Start the development environment:${NC}"
echo -e "   docker-compose up -d"
echo ""
echo -e "3. ${GREEN}Check service health:${NC}"
echo -e "   curl http://localhost:8080/healthz"
echo ""
echo -e "4. ${GREEN}View logs:${NC}"
echo -e "   docker-compose logs -f auth-server"
echo ""
echo -e "${YELLOW}üîê Security Notes:${NC}"
echo -e "- Generated passwords are unique to your local environment"
echo -e "- .env and docker-compose.override.yml are in .gitignore (safe from commits)"
echo -e "- For production, use proper secret management (K8s Secrets, AWS Secrets Manager)"
echo ""
echo -e "${YELLOW}üìö Optional Configuration:${NC}"
echo -e "- Add Google OAuth credentials to .env for social login testing"
echo -e "- Configure LDAP settings if you have a test LDAP server"
echo -e "- Adjust security settings for your development needs"
echo ""

# Check if Docker is running
if ! docker info &> /dev/null; then
    echo -e "${RED}‚ö†Ô∏è  Docker is not running. Please start Docker to use the development environment.${NC}"
    echo ""
fi

echo -e "${BLUE}================================================================================================${NC}"
echo -e "${GREEN}‚ú® Happy coding! Your local auth server environment is ready.${NC}"
echo -e "${BLUE}================================================================================================${NC}"