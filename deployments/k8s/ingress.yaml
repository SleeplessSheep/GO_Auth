# Nginx Ingress Controller setup
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: auth-ingress
  namespace: auth-system
  labels:
    app.kubernetes.io/name: auth-server
    app.kubernetes.io/component: ingress
  annotations:
    # Nginx ingress annotations
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit-connections: "20"
    nginx.ingress.kubernetes.io/rate-limit-requests-per-minute: "100"
    
    # CORS settings for OAuth endpoints
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "Authorization, Content-Type, Accept"
    nginx.ingress.kubernetes.io/cors-max-age: "86400"
    
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin" always;
      add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline';" always;
    
    # Client certificate authentication (optional for admin endpoints)
    # nginx.ingress.kubernetes.io/auth-tls-verify-client: "optional"
    # nginx.ingress.kubernetes.io/auth-tls-secret: "auth-system/client-certs"
    
    # Let's Encrypt certificate (if using cert-manager)
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - auth.your-domain.com
    - auth-api.your-domain.com
    secretName: auth-tls-secret
  rules:
  # Main auth server domain
  - host: auth.your-domain.com
    http:
      paths:
      # OAuth/OIDC endpoints
      - path: /.well-known
        pathType: Prefix
        backend:
          service:
            name: auth-service
            port:
              number: 80
      - path: /oauth
        pathType: Prefix
        backend:
          service:
            name: auth-service
            port:
              number: 80
      # Authentication endpoints
      - path: /auth
        pathType: Prefix
        backend:
          service:
            name: auth-service
            port:
              number: 80
      # Health checks
      - path: /healthz
        pathType: Prefix
        backend:
          service:
            name: auth-service
            port:
              number: 80
      # Root path
      - path: /
        pathType: Prefix
        backend:
          service:
            name: auth-service
            port:
              number: 80
  
  # API domain (for programmatic access)
  - host: auth-api.your-domain.com
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: auth-service
            port:
              number: 80
      - path: /oauth
        pathType: Prefix
        backend:
          service:
            name: auth-service
            port:
              number: 80
      - path: /.well-known
        pathType: Prefix
        backend:
          service:
            name: auth-service
            port:
              number: 80

---
# Development ingress (for local minikube)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: auth-ingress-dev
  namespace: auth-system-dev
  labels:
    app.kubernetes.io/name: auth-server
    app.kubernetes.io/component: ingress
    environment: development
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
spec:
  ingressClassName: nginx
  rules:
  - host: auth.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: auth-service-dev
            port:
              number: 80

---
# Certificate for production (using cert-manager)
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: auth-tls-cert
  namespace: auth-system
  labels:
    app.kubernetes.io/name: auth-server
    app.kubernetes.io/component: certificate
spec:
  secretName: auth-tls-secret
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  dnsNames:
  - auth.your-domain.com
  - auth-api.your-domain.com