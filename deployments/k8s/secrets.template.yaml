# ================================================================================================
# KUBERNETES SECRETS TEMPLATE
# ================================================================================================
# 
# ⚠️  SECURITY NOTICE: This is a TEMPLATE file for Kubernetes secret structure.
# ⚠️  Real secret values should be base64 encoded and stored securely.
# ⚠️  NEVER commit actual secret values to version control.
# ⚠️  Use kubectl create secret or external secret management systems.
#
# Purpose: Document the structure of secrets required for Kubernetes deployment
# Status: TEMPLATE ONLY - Contains placeholder values for documentation
# ================================================================================================

apiVersion: v1
kind: Secret
metadata:
  name: auth-server-secrets
  namespace: auth-system
  labels:
    app: auth-server
    component: secrets
  annotations:
    # Document secret rotation policy
    secret-rotation-policy: "quarterly"
    last-rotated: "YYYY-MM-DD"
    managed-by: "devops-team"
type: Opaque
data:
  # ------------------------------------------------------------------------------------------------
  # CRITICAL SECRETS (Base64 Encoded)
  # ------------------------------------------------------------------------------------------------
  # These must be generated per environment and base64 encoded
  
  # Master encryption key for JWT signing keys (32+ characters)
  # echo -n "your-production-32-byte-key-here" | base64
  master-encryption-key: Q0hBTkdFX01FX1BST0RVQ1RJT05fMzJfQllURV9LRVk=
  
  # Database password
  # echo -n "your-secure-db-password" | base64  
  database-password: Q0hBTkdFX01FX0RCX1BBU1NXT1JE
  
  # Redis password
  # echo -n "your-secure-redis-password" | base64
  redis-password: Q0hBTkdFX01FX1JFRElTX1BBU1NXT1JE
  
  # Google OAuth client secret
  # echo -n "your-google-client-secret" | base64
  google-client-secret: Q0hBTkdFX01FX0dPT0dMRV9TRUNSRVQ=
  
  # LDAP bind password
  # echo -n "your-ldap-service-account-password" | base64
  ldap-bind-password: Q0hBTkdFX01FX0xEQVBfUEFTU1dPUkQ=

stringData:
  # ------------------------------------------------------------------------------------------------
  # NON-SENSITIVE CONFIGURATION (Plain Text)
  # ------------------------------------------------------------------------------------------------
  # These can be plain text as they're not sensitive secrets
  
  # Database connection (non-sensitive parts)
  database-host: "auth-postgresql.database.svc.cluster.local"
  database-port: "5432"
  database-name: "auth_production"
  database-user: "auth_user"
  database-ssl-mode: "require"
  
  # Redis connection (non-sensitive parts)  
  redis-host: "auth-redis.cache.svc.cluster.local"
  redis-port: "6379"
  redis-db: "0"
  
  # JWT configuration (non-sensitive)
  jwt-issuer: "https://auth.yourcompany.com"
  jwt-audience: "production-clients"
  
  # Google OAuth (non-sensitive parts)
  google-client-id: "your-prod-client-id.apps.googleusercontent.com"
  google-redirect-url: "https://auth.yourcompany.com/auth/google/callback"
  
  # LDAP configuration (non-sensitive parts)
  ldap-host: "ldaps.yourcompany.com"
  ldap-port: "636"
  ldap-base-dn: "dc=yourcompany,dc=com"
  ldap-bind-dn: "cn=auth-service,ou=service-accounts,dc=yourcompany,dc=com"
  ldap-admin-group: "administrators"

---
# ================================================================================================
# ALTERNATIVE: External Secrets Operator Template
# ================================================================================================
# If using External Secrets Operator with AWS Secrets Manager / Azure Key Vault / GCP Secret Manager

apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: auth-server-external-secret
  namespace: auth-system
spec:
  refreshInterval: 15s
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: auth-server-secrets
    creationPolicy: Owner
  data:
  - secretKey: master-encryption-key
    remoteRef:
      key: auth-server/master-encryption-key
  - secretKey: database-password
    remoteRef:
      key: auth-server/database-password
  - secretKey: redis-password
    remoteRef:
      key: auth-server/redis-password
  - secretKey: google-client-secret
    remoteRef:
      key: auth-server/google-client-secret
  - secretKey: ldap-bind-password
    remoteRef:
      key: auth-server/ldap-bind-password

---
# ================================================================================================
# USAGE INSTRUCTIONS
# ================================================================================================
#
# Creating Secrets Manually:
#   1. Copy this file: cp secrets.template.yaml secrets.yaml
#   2. Replace all placeholder values with real base64-encoded secrets
#   3. Apply: kubectl apply -f secrets.yaml
#   4. Delete the file: rm secrets.yaml (never commit real values)
#
# Creating Secrets from Command Line:
#   kubectl create secret generic auth-server-secrets \
#     --from-literal=master-encryption-key="your-32-byte-key" \
#     --from-literal=database-password="secure-db-password" \
#     --from-literal=redis-password="secure-redis-password" \
#     --namespace=auth-system
#
# Using External Secrets (Recommended for Production):
#   1. Set up External Secrets Operator
#   2. Configure SecretStore for your cloud provider
#   3. Apply the ExternalSecret resource above
#   4. Secrets are automatically synced from external systems
#
# Security Best Practices:
#   - Use different secrets for each environment (dev/staging/prod)
#   - Enable secret encryption at rest in etcd
#   - Rotate secrets regularly using automated processes
#   - Audit secret access with RBAC and admission controllers
#   - Use External Secrets Operator for production environments
#
# ================================================================================================